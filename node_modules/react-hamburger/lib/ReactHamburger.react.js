"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactHamburger = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var deepmerge = _interopRequireWildcard(require("deepmerge"));

var React = _interopRequireWildcard(require("react"));

var _styledComponents = require("styled-components");

var _components = require("./components");

var _Bars = require("./components/Bars.react");

var _theme = require("./theme");

var ReactHamburger =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(ReactHamburger, _React$Component);

  function ReactHamburger() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, ReactHamburger);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ReactHamburger)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {
      open: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "toggleLinkContainer", function (value) {
      return _this.setState({
        open: value
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "hamburgerToggle", function () {
      var open = _this.state.open;
      return open ? _this.toggleLinkContainer(false) : _this.toggleLinkContainer(true);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "hamburgerTheme", void 0);
    return _this;
  }

  (0, _createClass2.default)(ReactHamburger, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          barColor = _this$props.barColor,
          barCount = _this$props.barCount,
          barHeight = _this$props.barHeight,
          barRadius = _this$props.barRadius;
      var _this$props2 = this.props,
          children = _this$props2.children,
          hamburgerHeight = _this$props2.hamburgerHeight,
          hamburgerWidth = _this$props2.hamburgerWidth,
          inline = _this$props2.inline,
          linkContainerColor = _this$props2.linkContainerColor,
          linkContainerMaxWidth = _this$props2.linkContainerMaxWidth,
          linkContainerPadding = _this$props2.linkContainerPadding,
          linkContainerSpeed = _this$props2.linkContainerSpeed,
          linkContainerTransition = _this$props2.linkContainerTransition,
          linkContainerWidth = _this$props2.linkContainerWidth,
          locked = _this$props2.locked,
          right = _this$props2.right,
          showTopBar = _this$props2.showTopBar,
          slide = _this$props2.slide,
          theme = _this$props2.theme,
          topBarColor = _this$props2.topBarColor,
          topBarGutter = _this$props2.topBarGutter,
          topBarHeight = _this$props2.topBarHeight,
          TopContent = _this$props2.TopContent,
          verticalSlide = _this$props2.verticalSlide;
      var open = this.state.open;
      var hamburgerTheme = deepmerge.all([_theme.theme, theme]);
      var Top = showTopBar || hamburgerTheme.topBar.display ? _components.TopBar : _components.TopContainer;
      var linkContainer = verticalSlide || hamburgerTheme.linkContainer.vertical ? React.createElement(_components.LinkContainerVertical, {
        color: linkContainerColor,
        hamburgerHeight: hamburgerHeight,
        onClick: this.hamburgerToggle,
        open: open,
        padding: linkContainerPadding,
        speed: linkContainerSpeed,
        showTopBar: showTopBar,
        topBarHeight: topBarHeight,
        transition: linkContainerTransition,
        width: linkContainerWidth
      }, children) : React.createElement(_components.LinkContainerHorizontal, {
        color: linkContainerColor,
        hamburgerHeight: hamburgerHeight,
        maxWidth: linkContainerMaxWidth,
        onClick: this.hamburgerToggle,
        open: open,
        padding: linkContainerPadding,
        right: right,
        speed: linkContainerSpeed,
        showTopBar: showTopBar,
        topBarHeight: topBarHeight,
        transition: linkContainerTransition,
        width: linkContainerWidth
      }, children);
      return React.createElement(_styledComponents.ThemeProvider, {
        theme: hamburgerTheme
      }, React.createElement(React.Fragment, null, React.createElement(Top, {
        color: topBarColor,
        height: topBarHeight,
        gutter: topBarGutter,
        inline: inline,
        locked: locked,
        right: right
      }, React.createElement(_components.HamburgerIcon, {
        height: hamburgerHeight,
        onClick: this.hamburgerToggle,
        open: open,
        right: right,
        slide: slide,
        speed: linkContainerSpeed,
        transition: linkContainerTransition,
        maxWidth: linkContainerMaxWidth,
        width: hamburgerWidth
      }, React.createElement(_Bars.Bars, {
        barColor: barColor,
        barCount: barCount,
        barHeight: barHeight,
        barRadius: barRadius
      })), React.createElement(_components.TopContentContainer, null, TopContent)), linkContainer));
    }
  }]);
  return ReactHamburger;
}(React.Component);

exports.ReactHamburger = ReactHamburger;
(0, _defineProperty2.default)(ReactHamburger, "defaultProps", {
  barCount: 3,
  theme: _theme.theme,
  TopContent: null,
  verticalSlide: false
});